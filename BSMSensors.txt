// Initialize all these variables in your code 

int AAT = 0;
int ambient = 34; // default value

int APP_Status = 0;
float accelPct = 0;
uint16_t motorSpeed = 0;
float vss = 0;
uint16_t vssRaw = 0;

int IL_mode = 0;
int shift_R = 0;
int shift_status = 0;


int i = 0;
int j = 0;
int k = 0;
int counter = 0;
byte var = 0;

unsigned char stmp78[8] = {0xDF, 0x3C, 0xFF, 0xE0, 0x98, 0xC0, 0x00, 0x00};
unsigned char stmp79[8] = {0xDF, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp86[8] = {0x3E, 0x83, 0x81, 0x5B, 0xE9, 0x98, 0x08, 0x00};
unsigned char stmpFD[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp165[8] = {0x40, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00};
unsigned char stmp166[8] = {0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp215[8] = {0x27, 0x10, 0x27, 0x10, 0x27, 0x10, 0x27, 0x10};
unsigned char stmp21C[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp240[8] = {0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp245[8] = {0x80, 0x17, 0xE8, 0x01, 0x80, 0x00, 0x00, 0x00};
unsigned char stmp25D[8] = {0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp420[8] = {0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x80};
unsigned char stmp4F0[8] = {0x14, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


unsigned char stmp9F[8] = {0x40, 0x64, 0x04, 0x09, 0x7F, 0x00, 0x69, 0x02};  
unsigned char stmp202[8] = {0x00, 0x03, 0x08, 0x00, 0x00, 0x00, 0x18, 0x93};

unsigned char stmp50[8] = {0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp91[8] = {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp9A[8] = {0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00};
unsigned char stmp9B[8] = {0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp9E[8] = {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80};
unsigned char stmp217[8] = {0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp228[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp340[8] = {0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x02, 0x00};
unsigned char stmp40A[8] = {0xBF, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp413[8] = {0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp43D[8] = {0x00, 0x10, 0x29, 0x31, 0x36, 0x24, 0x00, 0x00};
unsigned char stmp4F5[8] = {0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp4F8[8] = {0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp511[3] = {0x03, 0x02, 0x00};

unsigned char stmp40A1[8] = {0xC1, 0x00, 0x4A, 0x4D, 0x31, 0x42, 0x4E, 0x31};
unsigned char stmp40A2[8] = {0xC1, 0x01, 0x4C, 0x37, 0x33, 0x48, 0x31, 0x31};
unsigned char stmp40A3[8] = {0xC1, 0x02, 0x31, 0x33, 0x35, 0x30, 0x35, 0x00};
unsigned char stmp40A4[8] = {0xC1, 0x03, 0x38, 0x00, 0x1B, 0x09, 0x94, 0x00};
unsigned char stmp40A5[8] = {0xC1, 0x04, 0x00, 0x00, 0x07, 0xBD, 0x00, 0x00};
unsigned char stmp40A6[8] = {0xC0, 0x00, 0x82, 0xDD, 0xC3, 0x09, 0x06, 0x33};
unsigned char stmp40A7[8] = {0xC0, 0x01, 0x00, 0x03, 0x5A, 0x18, 0x00, 0x49};
unsigned char stmp40A8[8] = {0xBF, 0x00, 0x3D, 0x00, 0x00, 0x88, 0xFF, 0x00};
unsigned char stmp40A9[8] = {0xBF, 0x01, 0x21, 0x0D, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp40A10[8] = {0xBF, 0x02, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0F};
unsigned char stmp40A11[8] = {0xBF, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp40A12[8] = {0xBF, 0x04, 0x31, 0x00, 0x00, 0x10, 0x00, 0x00};
unsigned char stmp40A13[8] = {0xBF, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char stmp40A14[8] = {0xBF, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00};
unsigned char stmp40A15[8] = {0xBF, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00};
unsigned char stmp40A16[8] = {0xC0, 0x00, 0x82, 0xDD, 0xC3, 0x13, 0x06, 0x33};
unsigned char stmp40A17[8] = {0xC0, 0x01, 0x00, 0x03, 0x5A, 0x18, 0x00, 0x4A};
unsigned char stmp40A18[8] = {0xBF, 0x00, 0x3D, 0x6A, 0x00, 0x89, 0xFF, 0x00};
unsigned char stmp40A19[8] = {0xBF, 0x08, 0x21, 0x20, 0x01, 0x00, 0x00, 0x00};
unsigned char stmp40A20[8] = {0xBF, 0x09, 0x21, 0x00, 0x00, 0x40, 0x00, 0x00};
unsigned char stmp40A21[8] = {0xBF, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00};
unsigned char stmp40A22[8] = {0xBF, 0x11, 0x30, 0x03, 0xA4, 0x00, 0x00, 0x00};

unsigned long lastSend = 0;
unsigned long lastSend1 = 0;
unsigned long lastSend2 = 0;
unsigned long lastSend3 = 0;


unsigned char len1 = 0;
unsigned char buf1[8];
unsigned long canId1 = 0;
float steerAngle = 0;
uint16_t steerAngleRough = 0;

int bsmWarn = 0;





void loop{


//this is the portion of BSM code running in main loop, it collects relevant can information for the sensors 

  if (canId == 0x101) {
    accelPct = buf[0] * 0.392; //Get accelerator percent from motor controller 
  }

  if (canId == 0x105) {
    motorSpeed = (buf[0] << 8) | buf[1];
    motorSpeed = motorSpeed * 0.25;
    vss = (motorSpeed * 1.7 * 4.56 * 29 * 3.14 * 0.0000157828282828);  //Get vehicle speed from Motor Controller in kilometers per hour
    vss = vss * 0.621; //convert to miles per hour
  }

  if (canId == 0x086) {  //steering angle decode from EPS and recode 
    steerAngle = (buf[0] << 8) | buf[1];
    steerAngle = (steerAngle * 0.1) - 1598;  // Convert steering angle to degrees
    steerAngleRough = round(steerAngle) + 1000;  // Convert steering angle to a rounded estimate and then scale the way the blind spot sensors want data to be

    byte last3Bits = steerAngleRough & 0b00000111;
    byte remainingBits = steerAngleRough >> 3;
    byte byte3 = (remainingBits << 3) | last3Bits;
    byte byte4 = remainingBits >> 5;
    stmp86[3] = byte4;
    stmp86[4] = byte3;  // Encode Rough steering angle for blind spot sensors

   
  }


  if (canId == 0x6B1) {  // get ambient temperature from battery management system
    ambient = buf[2] - 40; // scale temp to real val
   
    chargeOn = buf[6];
  }


  bsmValues();

  bsm();


}



void bsmValues() {

  stmp40A18[3] = 0x08; //reset to default values 
  stmp9F[0] = 0x40;  
  stmp202[2] = 0x00;
  stmp202[3] = 0x00;
  stmp91[1] = 0x00;


  if (gear == 1) { If in reverse, set appropriate bits
    stmp40A18[3] |= static_cast<char>((1 & 0x01) << 7);
    stmp9F[0] |= static_cast<char>((1 & 0x01) << 0);  //reverse bit
  }

  if (gear == 3) {  //if in drive set appropriate bits
    stmp40A18[3] |= static_cast<char>((1 & 0x01) << 6);
  }


  if (parklight == 1) { //if Parking lights on set appropriate bits
    stmp9F[0] |= static_cast<char>((1 & 0x01) << 3);  //taillights bit
  }



  if (accelPct <= 20 && accelPct > 1) { //<20% accel pedal
    stmp40A18[3] |= static_cast<char>((1 & 0x01) << 4);
  }
  if (accelPct > 20) { //>20% accel pedal
    stmp40A18[3] |= static_cast<char>((1 & 0x01) << 5);
  }

  //vss = 8.12;
  if (vss > 6.2) { //>10kph
    stmp40A18[3] |= static_cast<char>((1 & 0x01) << 1);
  }
  if (vss <= 6.2) { //<10kph
    stmp40A18[3] |= static_cast<char>((1 & 0x01) << 0);  

  }



  vssRaw = static_cast<uint16_t>(vss * 100 * 1.609);  //scale (use mph here,  I converted from from mph to kph incorrectly above so fixed it here)

  
  stmp202[2] = (vssRaw >> 8) & 0xFF;  
  stmp202[3] = vssRaw & 0xFF;          




  if (leftCommand == 1) {  //left turn signal
    stmp91[1] = 0x20;
  }
  if (rightCommand == 1) {  //Right turn signal
    stmp91[1] = 0x10;
  }




}




void bsm() {


  if (CAN_MSGAVAIL == CAN2.checkReceive())
  {
    CAN2.readMsgBuf(&len1, buf1);
    canId1 = CAN2.getCanId();
  }

  if (canId1 == 0x477) {  //Read output from BMS sensors
   
    if (buf1[1] & 0b00010000 || buf1[1] & 0b00100000) {      
      bsmWarn |= 0b00000001;  //Set bit (sent to dash) to indicate car detected on left side
    } else {
      bsmWarn &= 0b11111110;  //otherwise set that bit to 0
    }


    if (buf1[1] & 0b01000000 || buf1[1] & 0b10000000) {      
      bsmWarn |= 0b00000010; //Set bit (sent to dash) to indicate car detected on left side      
    } else {
      bsmWarn &= 0b11111101;  //otherwise set that bit to 0
    }


    if (buf1[2] == 0x7A || buf1[2] == 0x2A || buf1[2] == 0xDA || buf1[2] == 0x8A || buf1[1] & 0b00100000 || buf1[1] & 0b10000000) {
      bsmWarn |= 0b10000000; //  BSM requesting a chime to be played, so set dash chime bit
    } else {
      bsmWarn &= 0b01111111;  //Set chime bit off
    }
  }


  //Checksums and MSG 1
  if ((millis() - lastSend > 30)) {


    CAN2.sendMsgBuf(0x78, 0, 8, stmp78);
    CAN2.sendMsgBuf(0x86, 0, 8, stmp86);


    lastSend = millis();

    i = stmp78[6];  //calculate rolling counters here
    i = i + 16;

    j = stmp86[5];
    j = j + 1;
    


    if (stmp78[6] == 240) {
      stmp78[6] = 0x00;  //reset rolling counters 
      i = stmp78[6];

    }


    if (stmp86[5] == 155) {
      stmp86[6] = 0x98;  // reset other roling counter
      j = stmp86[6];

    }

    stmp78[6] = i;
    stmp86[5] = j;
  }



  if ((millis() - lastSend3 > 25)) {

    CAN2.sendMsgBuf(0x9E, 0, 8, stmp9E);
    CAN2.sendMsgBuf(0x9F, 0, 8, stmp9F);
    lastSend3 = millis();
  }




  //More checksums and vehicle speed (vss) message
  if ((millis() - lastSend1 > 35)) {

    CAN2.sendMsgBuf(0x202, 0, 8, stmp202);


    lastSend1 = millis();

    var = stmpFD[2];
    var = var + 80;

    stmpFD[2] = var;

  }



  if ((millis() - lastSend2 > 100)) {
 

    AAT = ambient + 40;  //rescale ambient for sending purposes
    stmp40A17[7] = AAT;


    CAN2.sendMsgBuf(0x91, 0, 8, stmp91); //Send turn signal message
    counter++;

    if (counter == 1) {
      // CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A1); // All these commented out are not needed.
    }

    if (counter == 2) {
      // CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A2);
    }

    if (counter == 3) {
      //CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A3);
    }

    if (counter == 4) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A4);
    }

    if (counter == 5) {
      // CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A5);
    }

    if (counter == 6) {
      // CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A6);
    }

    if (counter == 7) {
      // CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A7);
    }

    if (counter == 8) {
      //  CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A8);
    }

    if (counter == 9) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A9);
    }

    if (counter == 10) {
      //  CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A10);
    }

    if (counter == 11) {
      //  CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A11);
    }

    if (counter == 12) {
      //  CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A12);
    }

    if (counter == 13) {
      //  CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A13);
    }

    if (counter == 14) {
      //  CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A14);
    }

    if (counter == 15) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A15);
    }

    if (counter == 16) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A16);
    }

    if (counter == 17) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A17); //AAT
    }
    if (counter == 18) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A18); //gear, accel state, vehicle speed state
    }
    if (counter == 19) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A19);
    }
    if (counter == 200) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A20);
    }
    if (counter == 21) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A21);
    }
    if (counter == 22) {
      CAN2.sendMsgBuf(0x40A, 0, 8, stmp40A22);
      counter = 0;
    }



    lastSend2 = millis();


    k = stmp91[3];  //more counters
    k = k + 1;


    if (stmp91[3] == 15) {
      stmp91[3] = 0x00;  // reset counter
      k = stmp91[3];

    }


    stmp91[3] = k;


  }
}

